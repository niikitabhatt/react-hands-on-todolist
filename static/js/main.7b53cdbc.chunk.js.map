{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listitems","items","map","item","className","key","type","value","text","id","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addTodo","preventDefault","state","console","log","filteredItem","filter","onSubmit","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUAuCeA,MAnCf,SAAmBC,GACjB,IAEOC,EAFOD,EAAME,MAEKC,KAAI,SAACC,GAC5B,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACrC,2BACE,2BACEC,KAAK,OACLC,MAAOJ,EAAKK,KACZC,GAAIN,EAAKE,IACTK,SAAU,SAACC,GACTZ,EAAMa,UAAUD,EAAEE,OAAON,MAAOJ,EAAKE,QAGzC,8BAEE,kBAAC,IAAD,CACED,UAAU,SACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAQ3C,OAAS,6BACP,kBAAC,IAAD,CAAWY,SAAU,IAAKC,OAAO,eAChClB,K,eC3BTmB,IAAQC,IAAIC,K,IA6EGC,E,kDA1Eb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IASRwB,YAAc,SAACZ,GACb,EAAKa,SAAS,CACZC,YAAa,CACXjB,KAAMG,EAAEE,OAAON,MACfF,IAAKqB,KAAKC,UAdG,EAkBnBC,QAAU,SAACjB,GACTA,EAAEkB,iBACiC,KAAhC,EAAKC,MAAML,YAAYjB,MAC1B,EAAKgB,SAAS,CACZvB,MAAM,GAAD,mBAAM,EAAK6B,MAAM7B,OAAjB,CAAwB,EAAK6B,MAAML,cACxCA,YAAa,CACXxB,MAAO,GACPI,IAAK,MAEN,WAAO0B,QAAQC,IAAI,QAAS,EAAKF,MAAM7B,UAE1C8B,QAAQC,IAAI,gBAAiB,EAAKF,MAAML,cA7BvB,EA+BnBT,WAAY,SAACX,GACV,IAAM4B,EAAc,EAAKH,MAAM7B,MAAMiC,QAAO,SAAA/B,GAAI,OAAGA,EAAKE,MAAOA,KAC/D,EAAKmB,SACH,CACEvB,MAAOgC,KAnCK,EAuCnBrB,UAAY,SAACJ,EAAMH,GACjB,IAAMJ,EAAQ,EAAK6B,MAAM7B,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKK,KAAKA,MAIZ,EAAKgB,SAAS,CACZvB,MAAOA,KA9CX,EAAK6B,MAAQ,CACX7B,MAAO,GACPwB,YAAa,CACXjB,KAAM,GACNH,IAAK,KANQ,E,qDAoDjB,OACE,yBAAKD,UAAU,OACb,6BACE,0BAAMA,UAAU,YAAY+B,SAAUC,KAAKR,SACzC,2BACEtB,KAAK,OACLI,SAAU0B,KAAKb,YACfhB,MAAO6B,KAAKN,MAAML,YAAYjB,MAAQ,KAExC,4BAAQF,KAAK,UAAb,SAGF,yBAAKF,UAAU,YACnB,kBAAC,EAAD,CAAWH,MAAOmC,KAAKN,MAAM7B,MAC7BW,UAAawB,KAAKxB,UAClBI,WAAYoB,KAAKpB,mB,GApELqB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.7b53cdbc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItems.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from 'react-flip-move';\r\nfunction ListItems(props) {\r\n  const items = props.items;\r\n\r\n   const listitems = items.map((item) => {\r\n    return <div className=\"list\" key={item.key}>\r\n      <p>\r\n        <input\r\n          type=\"text\"\r\n          value={item.text}\r\n          id={item.key}\r\n          onChange={(e) => {\r\n            props.setUpdate(e.target.value, item.key);\r\n          }}\r\n        ></input>\r\n        <span>\r\n        \r\n          <FontAwesomeIcon\r\n            className=\"faicon\"\r\n            icon=\"trash\"\r\n            onClick={() => props.deleteItem(item.key)}\r\n          ></FontAwesomeIcon>\r\n          \r\n        </span>\r\n      </p>\r\n    </div>\r\n    \r\n        });\r\n      return(  <div>\r\n        <FlipMove  duration={300} easing=\"ease-in-out\" >\r\n        {listitems}\r\n        </FlipMove>\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItems from './ListItems';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n  }\n  handleInput = (e) => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n  addTodo = (e) => {\n    e.preventDefault();\n    if(this.state.currentItem.text !== ''){\n    this.setState({\n      items: [...this.state.items, this.state.currentItem],\n      currentItem: {\n        items: \"\",\n        key: \"\",\n      },\n    }, () => {console.log(\"items\", this.state.items)});\n  }\n    console.log(\"current itmes\", this.state.currentItem);\n  };\n  deleteItem= (key)=>{\n     const filteredItem= this.state.items.filter(item=> item.key!== key)\n     this.setState(\n       {\n         items: filteredItem\n       }\n     )\n  }\n  setUpdate = (text, key) => {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key===key){\n        item.text=text\n      }\n    })\n\n      this.setState({\n        items: items\n      })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <form className=\"todo-form\" onSubmit={this.addTodo}>\n            <input \n              type=\"text\"\n              onChange={this.handleInput}\n              value={this.state.currentItem.text || \"\"}\n            ></input>\n            <button type=\"submit\">ADD</button>\n          </form>\n          </div>  \n          <div className=\"listitem\">\n      <ListItems items={this.state.items} \n      setUpdate = {this.setUpdate}\n      deleteItem={this.deleteItem}></ListItems>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}